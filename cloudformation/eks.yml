---
Description: >
  CloudFormation template to create Kubernetes Stack
Parameters:
  VPC:
    Description: Cluster VPC ID
    Type: AWS::EC2::VPC::Id
  privateSubnet:
    Description: Cluster Private subnet ID
    Type: AWS::EC2::Subnet::Id
  publicSubnet:
    Description: Cluster public subnet ID
    Type: AWS::EC2::Subnet::Id

Resources:
  EKSClusterInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref EKSClusterInstanceRole

  EKSClusterInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      RoleName: !Join [ "-", [ !Ref 'AWS::StackName', "EKS-Cluster-Role" ] ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
  
  EKSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for EKS Cluster
      GroupName: !Join [ "-", [ !Ref 'AWS::StackName', "EKS-Cluster-Security-Group" ] ]
      VpcId: !Ref VPC
      Tags:
      - Key: !Sub "kubernetes.io/cluster/${AWS::StackName}-EKS-Cluster"
        Value: 'owned'
      - Key: 'Name'
        Value: !Join [ "-", [ !Ref 'AWS::StackName', "EKS-Cluster-Security-Group" ] ]
  EKSCluster:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: !Sub "${AWS::StackName}-EKS-Cluster"
      RoleArn: !GetAtt EKSClusterInstanceRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EKSClusterSecurityGroup
        SubnetIds:
          - !Ref privateSubnet
          - !Ref publicSubnet
  
  WorkerNodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref WorkerNodeInstanceRole

  WorkerNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      RoleName: !Join [ "-", [ !Ref 'AWS::StackName', "EKS-Worker-Node-Role" ] ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  EKSNodegroup:
    Type: 'AWS::EKS::Nodegroup'
    DependsOn: EKSCluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-EKS-Cluster"
      NodeRole: !GetAtt WorkerNodeInstanceRole.Arn
      ScalingConfig:
        MinSize: 3
        DesiredSize: 5
        MaxSize: 7
      Labels:
        Release: !Sub "${AWS::StackName}-Worker-Node"
      Subnets:
        - !Ref privateSubnet
        - !Ref publicSubnet