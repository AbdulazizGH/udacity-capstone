# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.17.5/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint 
      - run:
          name: Install deployment dependencies
          command: |
            apt-get update
            apt-get -y install \
                apt-transport-https \
                ca-certificates \
                curl \
                gnupg-agent \
                software-properties-common
            curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
            apt-key fingerprint 0EBFCD88
            add-apt-repository \
            "deb [arch=amd64] https://download.docker.com/linux/debian \
            $(lsb_release -cs) \
            stable"
            apt-get update
            apt-get -y install docker-ce docker-ce-cli containerd.io

            pip install awscli
            aws --version

      - setup_remote_docker
      - run:
          name: Build, tag and push image
          command: |
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin

            export IMAGE="abdulazizgh/udacity-capstone:${CIRCLE_WORKFLOW_ID:0:7}"
            docker build . --tag=udacity-capstone:${CIRCLE_WORKFLOW_ID:0:7}
            docker tag udacity-capstone:${CIRCLE_WORKFLOW_ID:0:7} $IMAGE
            docker push $IMAGE
      - run:
          name: Deploy to Kubernetes cluster
          command: |
            export IMAGE="abdulazizgh/udacity-capstone:${CIRCLE_WORKFLOW_ID:0:7}"
            sed -i "s%image\: abdulazizgh\/udacity\-capstone%image\: ${IMAGE}%g" "k8s/deployment.yml"

            aws eks --region eu-west-3 update-kubeconfig --name k8s-test-eks-EKS-Cluster
            kubectl apply -f k8s/deployment.yml